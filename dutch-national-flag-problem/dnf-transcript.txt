YOUTUBE

Scene 1
If you have an array of elements and you need to sort them in ascending order, it is well known that this can be done in O(nlogn) time, with a sorting algorithm like merge sort for example.

But what if you knew that the elements of this array were constrained to only being one of three unique elements?

Actually, there is a way to now sort this in linear O(n) time.

This is known as the Dutch National Flag problem. It sorts an array in O(n) time and using only constant O(1) extra space. In other words, it can sort the array in place and in linear time.

The constraint is that all the elements in the array take on one of three distinct values.

Amazingly, it was proposed by Dijkstra, the same Dijkstra who created the famous shortest path algorithm.

The reason it's named that way is because the Dutch National Flag has only three colours, red, white and blue, so the problem was originally proposed as arranging balls of these colours in the order of the stripes on the flag.

Scene 2
The algorithm consists of three pointers, which we will call low, mid and high. 

Let's do a walkthrough of the algorithm with this pseudocode to guide us. This array consists of a low element of 1, middle element of 2 and high element of 3.

We start low and middle pointing to the first index of the array. And high points to the last index of the array.

While the mid pointer is less than or equal to the high pointer:
1. If the value at mid is equal to the value of the middle element, we increment the mid pointer.
2. If the value at mid is greater than the value of the middle element, we swap the elements at the mid and high pointers. Then we decrement the high pointer.
3. If the value at mid is less than the value of the middle element, we swap the elements at the low and mid pointers. Then we increment both pointers.

Mid is pointing to 1 which is less than the middle element (2). So we swap the elements at low and mid. Then we increment both pointers.

Now mid is pointing to 2 which is equal to the middle element, so we don't need to swap anything and just increment mid.

Now mid is pointing to 3 which is greater than the middle element, so we swap the elements at mid and high. Then we decrement the high pointer.

- Mid is pointing to the middle element so increment it. 
- Mid is pointing to 3 so swap with high and decrement high.
- Mid is pointing to 3 again so swap with high and decrement high.
- Mid is pointing to 1, so swap the elements at low and mid, and increment both low and mid.
- Mid is pointing to 2 the middle element so increment mid
- Finally, mid is pointing to 1, so swap the elements at low and mid

Now the algorithm is complete because the mid and high pointers have met, so we are done.


Scene 3
Let's look at a larger example. These are students and their test scores: Fail F, Pass P or Pass with Honours H. Now we want to rank the students purely based on these groupings.

You could be thinking "we could create three separate lists for each grade and add the students to these lists". But part of the appeal of the aforementioned three-pointer approach is that we can actually sort the list of these students in place. Meaning we don't need to waste any time or memory creating new lists and moving elements between lists.

So let's run through Dijkstra's three pointer algorithm on this list of students.

Start our low and mid pointers at the first element, and our high pointer at the last element. 

Initially, mid is pointing to a fail grade, which is less than our middle element of a passing grade. So we swap with the element at the low pointer and increment both low and mid. 

Note that here both low and mid start out pointing to the same item so the swap doesn't actually move anything.

Now mid is pointing to an honours grade which is greater than the middle element, so we swap with the grade at the high pointer and decrement the high pointer.

Mid now points to a passing grade, which is our middle element, so we simply increment the mid pointer.

Now mid points to a failing grade which is less than our middle element, so we swap with the element at the low pointer, and increment both pointers.

This is our middle element, so increment mid.

This is a failing grade, so swap with low and increment both.

This is an honours grade, so swap with high and decrement high.

And so on.

And we are done when the mid and high pointers meet.

Scene 4
You've seen a few examples now, so you can probably start to see why it works. Essentially, the low pointer keeps track of the end of the first group. The middle pointer tracks the end of the middle group. And the high pointer keeps track of the start of the high group. 

That is also why the swapping works. Because if the value at the mid pointer is less than the middle element, you swap it into the low category, and increment the pointer to nudge the end of the low group.

If the value at the mid pointer is the middle element, you increment the mid pointer to nudge the end of the mid group.

If the value at the mid pointer is greater than the middle element, you swap it into the high category. Then you decrement the high pointer to expand the size of the high group inwards.

For example this element is 2, our middle element, so we move the mid pointer to expand the end of the middle group. 

This element is 3, which is greater than our middle element, so we swap it into the high group. Then decrement the high pointer to mark the new start of the high group.

And this element is 1, which is less than our middle element, so we swap it into the low group. Then increment both the low and mid pointers to expand the ends of these groups.

We need to increment both pointers because whenever we swap the 1 into the low group, we simultaneously swap 2 (the middle element) into the mid group.

The algorithm ends when the middle and high pointers meet, because that is when the end of the middle group lines up with the start of the high group.

Scene 5
Time to code it. Note that this function returns a void because we are sorting the input list in place, so no need to return anything.

We initialise low and mid to 0, and high to the last index of the input list.

Then our middle element is 1 in this case but you would set that to be whatever your middle element is.

While the mid pointer is less than or equal to the high pointer:
- If the element at the mid pointer is equal to the middle element, increment the mid pointer.
- If the element at the mid pointer is greater than the middle element, swap with the element at the high pointer and decrement the high pointer.
- And lastly, if the element at the mid pointer is less than the middle element, swap with the element at the low pointer and increment both mid and low pointers.


MOBILE
If you have a list of elements and you need to sort it, it is well known you can do it in O(nlogn) time with an algorithm like merge sort for example.

But what if you knew the elements were constrained to being one of only three values? Actually, this can now be sorted in linear O(n) time. 

This is known as the Dutch National Flag problem and it was originally proposed by Dijkstra as arranging balls of the three colours of the stripes on the Dutch National Flag.

It operates in O(n) time and using only constant extra space because it has three pointers: Low keeps track of the end of the low group, mid tracks the end of the middle group, and high tracks the start of the high group.

Initialise low and mid to point to the first element of the array, and high points to the last element of the array. While mid is less than or equal to high:
- If the element at the mid pointer is equal to the middle element (2 in this case), increment the mid pointer.
- If the element at mid is greater than the middle element, swap with the element at the high pointer and decrement the high pointer.
- If the element at mid is less than the middle element, swap with the element at the low pointer and increment both pointers.

This effectively swaps each element into the correct group, and nudging the pointer expands the edge of that group outwards.

The algorithm ends after the mid pointer meets the high pointer because that is when the end of the mid group lines up with the start of the high group.