Scene 1
Python is a language which emphasises its readability. It encourages you to spread code across multiple lines and use whitespace to keep things clean.

That's why today I'm challenging myself to write a game in less than 50 lines of Python code, whilst keeping it readable, to show you how to make something fun and functional in just a few lines.

In the spirit of Python, we are going to be making a Snake game.

I wanted a retro arcade feel so I went with the curses library, which lets you create applications in your terminal.

In this video, we are going to code this snake game together in less than 50 lines, so let's dive right in.


Scene 2
Start by importing the curses library. 

Because we are creating a terminal game, in our code we want to muck with some terminal settings like not echoing keys to the screen, so our snake doesn't poop out a character every time we press a key.

But this means if the game crashes we won't get those settings restored.

So a clean thing to do in a curses program is to pass your main function into curses.wrapper which will restore your terminal settings if it encounters an exception.

This main function is then passed stdscr which is an object representing your screen.

At the moment it does absolutely nothing. Let's fix that by putting in a while True loop so the game runs until we ctrl C outta there. 

In the while True, let's also get the user's key presses with getch().

We can print out what keys we pressed to make sure everything is working. And yeah it's printing out the ascii codes for w a s and d. Looks good.

We are going to want to actually display a snake since it's a snake game.

I'm going to store the positions of the pieces of the body in a list called segments.

Let's start him in the top left corner. As in the first segment of this snake is the coordinate [1, 1].

And the idea is that we will add a segment to this list each time the snake eats a food and gets longer, in the form of a coordinate to keep track of where his body is.

And draw him to the screen with addch, which expects a position and a character.

The character I'm using for him is this cool checkerboard character.

He doesn't really move though so let's fix that. 


Scene 3
To simulate movement, a naive way would be to loop through every segment in the segments list from tail to head, and update all these segment pieces to be the position of the segment in front of it. And for the last segment, the head, nudge it in the direction of the snake's motion. 

Then redraw the snake on the screen.

But this is expensive and will take unecessary lines. 

Instead, notice that after one step or slither I guess, this grey section is identical between both snakes. So all we actually need to do to move the snake one step is pop the tail off and add the new head on in the direction of motion.

So the tail and the head only two segments we need to consider in each step. We don't need to touch the other segments.


Scene 4
Let's map w a s and d to the corresponding direction. ord gets the ASCII code of the character, because getch returns the ASCII code of the key you pressed.

I represent directions as the unit vector. For example, the character d is to the right. So it's a step 1 in the x direction.

curses writes all their coordinates in [y, x] rather than [x, y]. They mention in the docs that it's too late to change it now which is so real of them.

Just remember that up in the y direction is a step of -1 because y coordinates decrease as you move up the screen.

I'm going to start our snake off moving to the right. direction will store our current direction.

Now when the user presses a key, we can change the direction to match the key they pressed.

We move the snake by first placing a new head on our snake.

The head coordinates are found by adding on the direction vector to the current head, i.e. the first element of our segments list.

And insert this new head at the front of the segments list. And draw in the head with addch.

Note that addch expects coordinates for the character, and the character itself. This * syntax is a shorter way of writing the y x coordinates fully by just unpacking the list.

We then remove the tail which is the last element of the segments list, so pop it off. To remove the tail from the screen, I actually replace the tail character with a space to remove it.

Let's try it. Ok it moves in the direction we tell it to but we need to keep pressing a button, it doesn't move on its own.

This is because getch actually waits for a character input. So none of this other code of adding a head and popping the tail will happen until we input a character. And then it loops and waits for another character, so it is only ever doing one step at a time.

To fix this we can use timeout. timeout 75 means we wait 75 ms for user input of a character, before proceeding with the rest of the movement code.

If the user does not enter a character in this time, getch just returns -1 and moves on with its life.

So we also need to only change the direction if the user pressed a valid key, as in getch did not return -1.

Take a look and now the snake moves on his own, and clicking WASD changes his direction.


Scene 5
Unfortunately, the snake is allowed to just wander off my screen and crash the game.

Let's make sure he cannot leave. Firstly, let's draw a nice border in.

Then we can get the screen height and width with getmaxyx. 

The game should end if the snake crosses this width or height, as in the y coordinate of the snake hits 0 or height-1, or the x coordinate hits 0 or width-1.

Snake you're grounded.


Scene 6
If we're gonna put the snake in an enclosure like that it's only fair to give this guy something to eat.

Food should be randomly generated on the map.

So we need to import random and save this position in food_pos.

Then randomly generate the y coordinate between 1 and height-2, and the x coordinate between 1 and width-2, to account for the border.

Now you can see a piece of food has randomly generated, but nothing happens when he eats it. Which is like 0 calorie food.

When the snake eats food he should grow. 

So how to do this? Each time the snake moves a step, we pop the tail and add a new head. 

So how about, we only pop the tail when he is not eating food. As in, the coordinates of the head is not equal to the coordinates of the food.

That way when he eats food, the new head is added but the tail is not removed, and it gives the appearance of growth.

Now there is food and he grows when he noms it. 

But now he's hungry again! We need to generate new food when he eats.

So if his head does collide with the food, copy these two lines from above to generate some new food and put it in a different random location.

Now he's at an unlimited buffet.


Scene 7
We also want to keep track of your score, which should increment whenever he eats food.

We add the score to the screen with addstr.

addstr expects the y and x coordinates, let's just put the score counter on the border to avoid the snake colliding with it. Followed by the string to put on the screen, which is the score in this case. 

And of course, increment the score when he eats a food.

It doesn't look the prettiest but it gets the job done. As you can see I'm very good at this game. He's literally circling the food you're meant to eat it mate.


Scene 8
Let's clean up the code a little bit. 

In a snake game, you don't just lose after hitting the border, but you also cannot collide with yourself. So let's end the game if the snake hits one of its segments.

Another thing is he can change directions on himself in this crazy way. 

You should not be allowed to move from one direction to the opposite direction, say left directly to right or up directly to down, so lets catch that.

If two directions are opposites, their unit vectors will add to the 0 vector, [0, 0]. So let's not change direction if that's the case.

Finally, the food should not generate anywhere on the snake's body because he needs to slither towards it. So while the food generates in the same location as one of the segments, let's regenerate a new position instead.

And there we have it a fully functioning snake game. How's our line count looking?

49 lines. Perfect.

I'll put a link to this code in the description. See you next time :)