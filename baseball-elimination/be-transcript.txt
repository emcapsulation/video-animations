YOUTUBE

Scene 1
Here's a problem for you. This is the leaderboard of a sports league. 

Column w shows the number of wins each team has received, and l, the number of losses. Column r shows the number of remaning games each team has. And the four columns after this shows who the the teams' remaining games are to be played against.

The winner of the season is whichever team wins the most games.

The question for you is: Which teams have no chance of winning the season?

To start, let's consider the team currently in last place - Diamond. They have two wins, and two games remaining. Do they have a chance of taking home the trophy?

No, because even if they win both their remaining games, they still end up with only four wins, which is not enough to ever take the lead.

As a result, this team is "trivially eliminated".

But what about the third team, Triangle?

You might think they have a chance of winning, since they have two games remaining.

If they win both of these games, as long as the team currently in first place - Circle - loses all of their remaining games, they can both finish off the season with 6 wins and tie for the trophy right?

Well, not quite.

We need to consider who Circle's remaining games are against.

Circle has three games left to play and they are all against Square. Remember, Circle needs to lose all three of their remaining games to not overtake Triangle, if Triangle wants to tie for the trophy. 

But this means Square must win those three games. And this would actually put Square into first place instead.

As a result, Triangle cannot win the season. They are eliminated too, but less trivially.


Scene 2
Here is a harder example. Can you show that Diamond has no chance of winning the season?

What if I told you this could be turned into a max flow problem?


Scene 3
This is known as the Baseball Elimination Problem. You can determine whether a team is eliminated by turning this into a max flow problem. But what is a max flow problem?

Imagine you have a graph which has a source node where flow is emanating from, and a sink node where the flow will reach. Nodes are joined with weighted directed edges, where each edge weight defines the maximum flow (or capacity) which can be sent through this edge.

Then the goal of the max flow problem is to determine what is the maximum flow that can reach the sink given the capacity of edges in the graph.

Let's look at a small example.

To find the max flow, let's look at the paths.

Starting with the top path, 5 units of flow can travel through the first edge. But the second edge only has a capacity of 3, restricting the flow. This means only 3 units of flow will enter the sink in this path.

Now let's analyse the bottom path. 2 units of flow can travel through the first edge. Now, even though the next edge has the ability to carry 4 units of flow, only 2 units of flow entered the edge. So this edge will simply carry these 2 units to the sink. So, 2 units of flow will enter the sink in this path.

The max flow of this flow network is 3 (from the top path) + 2 (from the bottom path) = 5. 


Scene 4
In fact the maximum flow is equal to the minimum cut. A cut is a set of edges where if you removed them, you would disconnect the source from the sink. And we want the minimum cut - the cut with the smallest total of edge weights.

This makes sense because the minimum cut essentially represents your bottlenecks in all the paths from the source to the sink, which caps your maximum flow.

Going back to our previous example, the edges I'm removing are all cuts because the source is disconnected from the sink. 

But to find the max flow, we want the min cut, which is this one because removing these edges disconnects the source and sink, and 3 + 2 is the minimum total edge weights for any cut in this network. So the max flow is 3 + 2 = 5.

Bringing back our larger network, can you find the max flow by searching for the min cut?

Remember, a cut is a set of edges where if you removed them, the sink is cut off from the source. And you want the cut which has the minimum total value of edge weights.

That's right, this is the min cut. So the max flow is 4 + 3 + 9 = 16.


Scene 5
Ok so what does all this have to do with the baseball elimination problem?

Let's use this scoresheet from earlier in the video as an example - we want to check if Diamond is eliminated. We create a flow network of the other teams' remaining games.

First, create a game vertex for each combination of two teams in the table (not including the team we are checking). These game vertices represent the remaining games of the other teams. 

So, we set the capacity of the edges from the source to these game vertices as the number of remaining games those two teams have to play against each other.

For example, Square and Pentagon have three remaining games against each other, Square and Triangle have two, and Pentagon and Triangle have four.

Next, create a team vertex for each team, not including the team we are checking. These represent the winners of the games from the game vertices.

Join each game vertex to the two teams playing in that game vertex. For example, this top one joins to Square and Pentagon because those are the two teams in that game.

We set the capacity of these edges to be infinity, because we don't wish to restrict the flow here. We are going to determine the flow, or number of wins from the game vertices, later.

Connect each of these team vertices to the sink. Now, we do want to restrict the flow here. 

We want to set the capacity to be the maximum number of wins this team can get such that it cannot eliminate the team we are checking, Diamond.

This is equal to the total number of wins possible for the team we are checking (w + r), minus the number of wins which this team vertex has already achieved.

For example, the total number of wins possible for Diamond is all of their current wins (19), plus the number of remaining games they have (4) - Diamond has the potential to win up to 23 games. 

So if we look at the first team vertex, Square, what do we set the capacity to be such that they don't eliminate Diamond? We set it to 1, because Diamond can win up to 23 games, and Square has already won 22 games, so Square can only win 1 more game to not eliminate Diamond.

If Square wins more than this, say 2 more games, they'd be on 24 wins which is more than anything Diamond can possibly win. So we set the capacity to 1.

Pentagon has won 20 games so far, so we cap this edge to be 3.

Finally, Triangle on 19 wins can win 4 more games.

Amazingly, Diamond is eliminated if and only if the maximum flow is less than the number of remaining games between all other teams. I.e. the sum of all these edge weights from the source to the game vertices.

Remember the max flow is equal to the min cut - in this case the min cut is 8, which is less than the number of remaining games between the other teams (9), so Diamond is eliminated.


Scene 6
If we analyse the flow here, you can pick up some intuition about why this works.

In the edges to the sink, we restrict the flow representing the wins of the other teams. This restriction ensures the number of wins of all other teams is enought to, at best, tie with the team we are checking (and NOT eliminate it).

And the flow from the source represents the games to be played between the other teams.

If the max flow is less than the number of remaining games between all other teams, it means it is not possible to play all remaining games such that our team wins. 

Let's try it:

Firstly, let's assume Diamond wins all 4 of their remaining games so they are on 23 wins.

- Square and Pentagon have 3 games left against each other. 
--> We will let Square win one, because they only have capacity to win one more game to not eliminate Diamond.
--> Then Pentagon wins the remaining 2 games. 
- Square and Triangle have 2 games left against each other.
--> Square doesn't have room to win any more games or Diamond will be eliminated, so let's let Triangle win both of these. 
- Finally, Pentagon and Triangle have 4 games against each other. 
--> Pentagon can win 1 more to not eliminate Diamond.
--> But, Triangle can only win 2 more to not eliminate Diamond... yet there are three wins to distribute!

As you can see here, we cannot distribute the wins of all the remaining games, amongst the other teams such that no one overtakes Diamond.

So our team is eliminated.


Scene 7
Let's look at an example where the team is not eliminated.

In this example we wish to see if Diamond is eliminated.

Set up the network:
- The source is connected to game vertices with the number of games remaining between these two teams. 
- These are connected to the team vertices representing the winners of these games. 
- And these team vertices are connected to the sink, with the flow capped at the maximum number of wins they can get to not eliminate the team we are checking.

If the max flow is equal to the number of remaining games, it means the flow (or wins of other teams' games) can be distributed in this network in such a way that all other teams can, at best, tie with the team we are checking. 

This means our team is not eliminated - it has a chance of winning!

In this case, we can distribute the wins of the other teams' remaining games in this way. 

Firstly, we assume Diamond wins all its remaining games.

- Square and Pentagon have 2 games against each other.
--> We need to let Pentagon win both of these because Square cannot win anymore or it will eliminate Diamond.
- Square and Triangle have 1 game, again, Triangle must win.
- Hexagon must win their game against Square too.
- For Pentagon and Triangle's 2 games, you can see that Pentagon's wins are at capacity now from winning its games against Square, so we'll let Triangle win both of these.
- We'll also let Hexagon win its game against Pentagon. 
- Finally, Triangle and Hexagon have 2 games against each other. 
--> Neither team is at capacity, so we can let Triangle win 1 game, and Hexagon win the other.

Looking at the scorecard - You see Diamond has the possibility of earning 7 wins and tying for the trophy.


Scene 8
Let's code this now.

Firstly I have a main function here with some test cases.

We are going to pass in the list of team names and the number of wins each team has received so far. 

Also pass in the table of games the teams will play against one another, so this is a 2D matrix. 

Pass in the team name of the team to check is eliminated.

Firstly let's save the number of teams as n.

We are going to get the index of the team we are checking for easier lookup. So loop through and store that index.

We are also going to get the number of remaining games for the team we are checking. To do that we can sum up the number of remaining games they have in their row of the games table.

First, let's see if they are trivially eliminated. Trivially eliminated happens when the team we are checking's wins plus games they have remaining, is less than some other team's wins so far, meaning we can never catch them even if we win all our remaining games.

Now let's make the flow network.

I'm going to map each team to a list of their neighbours. Each element in the neighbours list has a pair, the first being the name of the neighbour, the second being the capacity of that edge.

So let's start by inserting the source and sink into the graph.

Next we are going to create the nodes.

To make the game vertices, we need each combination of two teams i and j. And we need to skip the team we are checking. Remember the flow network only consists of the other teams in the tournament.

We can call these game vertices team 1 and some separator, team 2.

The capacity from the source to this game node is the number of games remaining between these two teams. So we can look that up in the games table. Let's add this game node to the source node's neighbour list.

While we're at it, we can create the team vertices for these two teams if we haven't already.

The capacity of the game node to its two team nodes is infinity, remember we don't restrict the flow here.

While we're inside the outer for loop, we can also create the edge from the team node at i to the sink. This is equal to the wins plus the number of remaining games of the team we are checking, minus the number of wins of this team.

Now we have our graph, we calculate the max flow on it using Ford Fulkerson. This is something for a future video to explain.

Then get the total number of games remaining between other teams.

If the max flow is less than this value, our team is eliminated.

Otherwise, they have a chance of winning.